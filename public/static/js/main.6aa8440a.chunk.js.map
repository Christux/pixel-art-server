{"version":3,"sources":["recoil/images.js","recoil/constants.js","components/Header.js","components/LinkList.js","components/Welcome.js","recoil/clients.js","recoil/imagesets.js","components/ClientConfigForm.js","components/ClientList.js","components/ClientConfig.js","components/Draggable.jsx","components/Droppable.jsx","components/ImageSorter.js","components/ConfirmationModal.js","utils/Actions.js","components/ImagesetConfigForm.js","components/ImagesetList.js","components/ImagesetConfig.js","components/ImageLoader.js","App.js","reportWebVitals.js","index.js"],"names":["IMAGE_LIST_URL","IMAGE_UPLOAD_URL","imageId","atom","key","default","imageSelector","selector","get","imageIdValue","imageListValue","imagesList","_","findWhere","id","name","duration","images","a","fetch","then","res","json","apiData","set","data","anImage","allImages","thisImage","Math","round","random","length","console","log","Header","props","useRecoilState","anImageRef","className","src","path","alt","title","children","LinkList","ButtonGroup","Button","variant","activeScreen","onClick","Welcome","CLIENT_API_URL","clientId","clientObject","clientIdValue","clientListValue","clientsList","clientSelector","IMAGESET_API_URL","IMAGESET_API_URL_SINGULAR","imagesetId","formImageSet","editorImageset","isEmpty","imagesetIdValue","imagesetListValue","imagesetsList","rData","clone","slice","emptyImageSet","value","idValue","imagesetSelector","ClientConfigForm","clientObjectData","clientlistData","clientsListSetter","imagesets","inputChanged","e","allClientData","newValue","target","type","checked","parseInt","newClientObject","defaults","oldObject","oldPos","indexOf","splice","handleSubmit","preventDefault","request","Request","method","body","JSON","stringify","headers","returnedData","Form","onSubmit","Row","Col","sm","Group","controlId","Label","Control","onChange","disabled","Text","pixelsCount","width","height","as","start","Check","label","zigzag","map","imageset","index","ClientList","clientLists","useRecoilValue","clientIdSetter","useSetRecoilState","oldId","dataset","item","href","ClientConfig","state","userId","this","setState","Container","fluid","fallback","onClientSelect","bind","Component","Draggable","useDraggable","attributes","listeners","setNodeRef","transform","style","x","y","undefined","ref","Droppable","useDroppable","dropId","isOver","color","ImageSorter","getImages","useState","selectedIds","setSelectedIds","getFilter","setFilter","getMode","setMode","useEffect","uniq","selectedImageIds","generateImages","status","source","uniqueSelected","compact","filter","image","toLowerCase","replace","backgroundColor","onDragEnd","event","newImageList","hasUpdated","over","draggedId","active","contains","push","changeCallback","ToggleButtonGroup","choice","ToggleButton","ConfirmationModal","Modal","size","centered","closeButton","Title","Body","Footer","onAccept","onDecline","saveImageSetsToServer","passedState","promise","success","ImagesetConfigForm","localState","setLocalState","imagesetlistData","imagesetsListSetter","confirmModalVisible","setConfirmModalVisible","getClients","setCurrentId","newLocalState","deleteCurrentConfig","uid","allImagesetData","call","finalresult","brightness","client","alpha","hex","imageIdList","show","ImagesetList","imagesetIdSetter","setCurrentFormData","currentHighestId","max","pluck","ImagesetConfig","xs","onImagesetSelect","ImagesetId","ImageLoader","uploadDir","form","setForm","uploadedImages","setuploadedImages","resetImages","useResetRecoilState","setImages","onDrop","useCallback","acceptedFiles","dealWithUploads","useDropzone","getRootProps","getInputProps","isDragActive","rawFileHandles","promises","upload","Promise","resolve","reader","FileReader","onabort","onerror","onload","file","uri","result","readAsDataURL","all","allDataURIs","resultObj","fileIndex","element","uploadSelectedFiles","formData","FormData","append","results","newUploads","each","uploadResult","stats","newImages","emptyMessage","App","currentScreen","linkClick","changeScreen","mainContent","homeclick","currentTarget","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6aa8440a.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\nimport _ from \"underscore\";\r\nimport { getBaseURL } from \"./constants\";\r\n\r\nexport const IMAGE_LIST_URL = `${getBaseURL()}/images`;\r\nexport const IMAGE_UPLOAD_URL = `${getBaseURL()}/upload`;\r\n\r\nexport const imageFetching = atom({\r\n  key: \"imageFetching\",\r\n  default: false,\r\n});\r\n\r\nexport const imageId = atom({\r\n  key: \"imageId\",\r\n  default: 0,\r\n});\r\n\r\nexport const imageObject = selector({\r\n  key: \"imageObject\",\r\n  get: ({ get }) => {\r\n    const imageIdValue = get(imageId);\r\n    const imageListValue = get(imagesList);\r\n    if (!imageIdValue) return;\r\n    return (\r\n      _.findWhere(imageListValue, { id: imageIdValue }) || {\r\n        id: imageIdValue,\r\n        name: \"\",\r\n        duration: 10,\r\n        images: [],\r\n      }\r\n    );\r\n  },\r\n});\r\n\r\nexport const imageSelector = selector({\r\n  key: \"imageSelector\",\r\n  get: async () => {\r\n    const apiData = await fetch(IMAGE_LIST_URL).then((res) => res.json());\r\n    return apiData;\r\n  },\r\n  set: ({ set }, data) => {\r\n    set(imagesList, data);\r\n  },\r\n});\r\n\r\nexport const imagesList = atom({\r\n  key: \"imagesList\",\r\n  default: imageSelector,\r\n});\r\n\r\nexport const anImage = selector({\r\n  key: \"randomImage\",\r\n  get: ({ get }) => {\r\n    const allImages = get(imagesList);\r\n    const thisImage =\r\n      allImages[Math.round(Math.random() * 100000) % allImages.length];\r\n    console.log({ thisImage });\r\n    return thisImage;\r\n  },\r\n});\r\n","export const API_BASE_URL = \"http://192.168.0.85:3001\";\r\n\r\nexport function getBaseURL() {\r\n  return process.env.NODE_ENV === \"production\"\r\n    ? \"\"\r\n    : \"http://192.168.0.85:3001\";\r\n}\r\n","import { useRecoilState } from \"recoil\";\r\nimport { getBaseURL } from \"../recoil/constants\";\r\nimport { anImage } from \"../recoil/images\";\r\n\r\nexport function Header(props) {\r\n  const [anImageRef] = useRecoilState(anImage);\r\n\r\n  return (\r\n    <div className=\"c-header u-pad--20 u-flex u-flex--align-center u-flex--justify-between\">\r\n      <div className=\"c-header-branding u-flex u-flex--align-center\">\r\n        <div\r\n          className=\"home-link u-flex u-cursor--pointer\"\r\n          data-target=\"welcome\"\r\n        >\r\n          <img\r\n            className=\"u-margin--right-20\"\r\n            src={getBaseURL() + anImageRef.path}\r\n            alt={anImageRef.path}\r\n          />\r\n          <h2 className=\"c-header-title u-margin--bottom-0\">{props.title}</h2>\r\n        </div>\r\n      </div>\r\n      <div className=\"c-header-links\">{props.children}</div>\r\n    </div>\r\n  );\r\n}\r\n","import { Button, ButtonGroup } from \"react-bootstrap\";\r\n\r\nexport default function LinkList(props) {\r\n  return (\r\n    <ButtonGroup className=\"c-link-list\" aria-label=\"First group\">\r\n      <Button\r\n        variant=\"light\"\r\n        className={props.activeScreen === \"imageupload\" ? \"is-active\" : \"\"}\r\n        data-target=\"imageupload\"\r\n        onClick={props.onClick}\r\n      >\r\n        Images\r\n      </Button>\r\n      <Button\r\n        variant=\"light\"\r\n        className={props.activeScreen === \"clientconfig\" ? \"is-active\" : \"\"}\r\n        data-target=\"clientconfig\"\r\n        onClick={props.onClick}\r\n      >\r\n        Clients\r\n      </Button>\r\n      <Button\r\n        variant=\"light\"\r\n        className={props.activeScreen === \"imagesorter\" ? \"is-active\" : \"\"}\r\n        data-target=\"imagesorter\"\r\n        onClick={props.onClick}\r\n      >\r\n        Playlists\r\n      </Button>\r\n    </ButtonGroup>\r\n  );\r\n}\r\n","export function Welcome(props) {\r\n  return (\r\n    <div className=\"u-pad--20\">\r\n      <p>Choose a function from the options above to get started.</p>\r\n      <ul>\r\n        <li>Images - upload images to display</li>\r\n        <li>Clients - configure clients for correct image display</li>\r\n        <li>\r\n          Playlists - arrange one or more images into a sequence, adjust timings\r\n          etc.\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import { atom, selector } from \"recoil\";\r\nimport _ from \"underscore\";\r\nimport { getBaseURL } from \"./constants\";\r\n\r\nexport const CLIENT_API_URL = `${getBaseURL()}/clients`;\r\n\r\nexport const clientFetching = atom({\r\n  key: \"clientFetching\",\r\n  default: false,\r\n});\r\n\r\nexport const clientId = atom({\r\n  key: \"clientId\",\r\n  default: 0,\r\n});\r\n\r\nexport const clientObject = selector({\r\n  key: \"clientObject\",\r\n  get: ({ get }) => {\r\n    const clientIdValue = get(clientId);\r\n    const clientListValue = get(clientsList);\r\n    if (!clientIdValue) return;\r\n    return _.findWhere(clientListValue, { id: clientIdValue });\r\n  },\r\n});\r\n\r\nexport const clientSelector = selector({\r\n  key: \"clientSelector\",\r\n  get: async () => {\r\n    const apiData = await fetch(CLIENT_API_URL).then((res) => res.json());\r\n    return apiData;\r\n  },\r\n  set: ({ set }, data) => {\r\n    set(clientsList, data);\r\n  },\r\n});\r\n\r\nexport const clientsList = atom({\r\n  key: \"clientsList\",\r\n  default: clientSelector,\r\n});\r\n","import { atom, selector } from \"recoil\";\r\nimport _ from \"underscore\";\r\nimport { getBaseURL } from \"./constants\";\r\n\r\nexport const IMAGESET_API_URL = `${getBaseURL()}/imagesets`;\r\nexport const IMAGESET_API_URL_SINGULAR = `${getBaseURL()}/imageset`;\r\n\r\nexport const imagesetFetching = atom({\r\n  key: \"imagesetFetching\",\r\n  default: false,\r\n});\r\n\r\nexport const imagesetId = atom({\r\n  key: \"imagesetId\",\r\n  default: 0,\r\n});\r\n\r\nexport const formImageSet = atom({\r\n  key: \"imageFormState\",\r\n  default: {},\r\n});\r\n\r\nexport const editorImageset = selector({\r\n  key: \"imagesetObject\",\r\n  get: ({ get }) => {\r\n    if (!_.isEmpty(get(formImageSet))) return get(formImageSet);\r\n    const imagesetIdValue = get(imagesetId);\r\n    const imagesetListValue = get(imagesetsList);\r\n    if (!imagesetIdValue) return;\r\n    const rData = _.clone(\r\n      _.findWhere(imagesetListValue, { id: imagesetIdValue })\r\n    );\r\n    if (rData) {\r\n      console.log(rData);\r\n      rData.images = rData.images ? rData.images.slice() : [];\r\n      return rData;\r\n    } else {\r\n      return emptyImageSet(imagesetIdValue);\r\n    }\r\n  },\r\n  set: ({ set }, value) => {\r\n    set(formImageSet, value);\r\n  },\r\n});\r\n\r\nexport const emptyImageSet = (idValue) => {\r\n  return {\r\n    id: idValue,\r\n    name: \"\",\r\n    duration: 10,\r\n    images: [],\r\n  };\r\n};\r\n\r\nexport const imagesetSelector = selector({\r\n  key: \"imagesetSelector\",\r\n  get: async () => {\r\n    const apiData = await fetch(IMAGESET_API_URL).then((res) => res.json());\r\n    return apiData;\r\n  },\r\n  set: ({ set }, data) => {\r\n    set(imagesetsList, data);\r\n  },\r\n});\r\n\r\nexport const imagesetsList = atom({\r\n  key: \"imagesetsList\",\r\n  default: imagesetSelector,\r\n});\r\n","import { useRecoilState } from \"recoil\";\r\nimport { clientObject, clientsList, CLIENT_API_URL } from \"../recoil/clients\";\r\nimport _ from \"underscore\";\r\nimport { Button, Col, Form } from \"react-bootstrap\";\r\nimport { imagesetsList } from \"../recoil/imagesets\";\r\n\r\nexport function ClientConfigForm(props) {\r\n  const [clientObjectData] = useRecoilState(clientObject);\r\n  const [clientlistData, clientsListSetter] = useRecoilState(clientsList);\r\n  const [imagesets] = useRecoilState(imagesetsList);\r\n\r\n  const inputChanged = function (e) {\r\n    const allClientData = clientlistData.slice();\r\n\r\n    let newValue =\r\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\r\n    newValue = e.target.type === \"number\" ? parseInt(newValue) : newValue;\r\n\r\n    const newClientObject = _.defaults(\r\n      { [e.target.name]: newValue },\r\n      { ...clientObjectData }\r\n    );\r\n    const oldObject = _.findWhere(allClientData, { id: newClientObject.id });\r\n    const oldPos = allClientData.indexOf(oldObject);\r\n    allClientData.splice(oldPos, 1, newClientObject);\r\n    clientsListSetter(allClientData);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    // nothing to gather, just send it\r\n    e.preventDefault();\r\n\r\n    const request = new Request(CLIENT_API_URL, {\r\n      method: \"POST\",\r\n      body: JSON.stringify(clientObjectData),\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        // 'Content-Type': 'application/x-www-form-urlencoded',\r\n      },\r\n    });\r\n\r\n    const returnedData = await fetch(request).then((res) => res.json());\r\n    console.log(returnedData);\r\n    //setClientSelector(returnedData);\r\n  };\r\n\r\n  const body = clientObjectData ? (\r\n    /* \"id\": \"one\", \r\n\t\t\"pixelsCount\": 1024,\r\n\t\t\"width\" : 32,\r\n\t\t\"height\" : 32,\r\n\t\t\"direction\" : \"horizontal\",\r\n\t\t\"zigzag\" : true,\r\n\t\t\"start\" : \"top\"  */\r\n    <div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Row>\r\n          <Col sm=\"6\">\r\n            <Form.Group controlId=\"clientId\">\r\n              <Form.Label>Client Name</Form.Label>\r\n              <Form.Control\r\n                name=\"name\"\r\n                onChange={inputChanged}\r\n                type=\"text\"\r\n                value={clientObjectData.name}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n\r\n          <Col sm=\"3\">\r\n            <Form.Group controlId=\"clientId\">\r\n              <Form.Label>Client ID</Form.Label>\r\n              <Form.Control\r\n                name=\"id\"\r\n                onChange={inputChanged}\r\n                type=\"text\"\r\n                value={clientObjectData.id}\r\n                disabled\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Set in client, locked.\r\n              </Form.Text>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm=\"3\">\r\n            <Form.Group controlId=\"pixelsCount\">\r\n              <Form.Label>Pixels count</Form.Label>\r\n              <Form.Control\r\n                name=\"pixelsCount\"\r\n                onChange={inputChanged}\r\n                type=\"number\"\r\n                value={clientObjectData.pixelsCount}\r\n                disabled\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Set in client, locked.\r\n              </Form.Text>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n        <Form.Row>\r\n          <Col sm=\"2\">\r\n            <Form.Group controlId=\"width\">\r\n              <Form.Label>Pixel width</Form.Label>\r\n              <Form.Control\r\n                name=\"width\"\r\n                onChange={inputChanged}\r\n                type=\"number\"\r\n                value={clientObjectData.width}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm=\"2\">\r\n            <Form.Group controlId=\"height\">\r\n              <Form.Label>Pixel height</Form.Label>\r\n              <Form.Control\r\n                name=\"height\"\r\n                onChange={inputChanged}\r\n                type=\"number\"\r\n                value={clientObjectData.height}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm=\"4\">\r\n            <Form.Group className=\"sm-3\" controlId=\"direction\">\r\n              <Form.Label>Row direction</Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                name=\"direction\"\r\n                onChange={inputChanged}\r\n              >\r\n                <option>Choose the orientation of rows in the matrix</option>\r\n                <option value=\"horizontal\">Horizontal</option>\r\n                <option value=\"vertical\">Vertical</option>\r\n              </Form.Control>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm=\"4\">\r\n            <Form.Group className=\"sm-3\" controlId=\"start\">\r\n              <Form.Label>Starting point</Form.Label>\r\n              <Form.Control\r\n                as=\"select\"\r\n                name=\"start\"\r\n                value={clientObjectData.start}\r\n                onChange={inputChanged}\r\n              >\r\n                <option>location of the first pixel</option>\r\n                <option value=\"topleft\">Top-left</option>\r\n                <option value=\"topright\">Top-right</option>\r\n                <option value=\"bottomleft\">Bottom-left</option>\r\n                <option value=\"bottomright\">Bottom-right</option>\r\n              </Form.Control>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n        <Form.Row>\r\n          <Col>\r\n            <Form.Group className=\"sm-3\" controlId=\"zigzag\">\r\n              <Form.Check\r\n                type=\"checkbox\"\r\n                label=\"Zigzag rows\"\r\n                name=\"zigzag\"\r\n                onChange={inputChanged}\r\n                value={clientObjectData.zigzag}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Do the rows zigzag? If false, they are assumed to start at the\r\n                same end.\r\n              </Form.Text>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n        <Form.Row>\r\n          <Col>\r\n            <Form.Group className=\"sm-3\" controlId=\"imagesetId\">\r\n              <Form.Control\r\n                as=\"select\"\r\n                label=\"Zigzag rows\"\r\n                name=\"imagesetId\"\r\n                onChange={inputChanged}\r\n                value={clientObjectData.imagesetId}\r\n              >\r\n                {imagesets.map((imageset, index) => (\r\n                  <option key={index} value={imageset.id}>\r\n                    {imageset.name}\r\n                  </option>\r\n                ))}\r\n              </Form.Control>\r\n              <Form.Text className=\"text-muted\">\r\n                Do the rows imagesetId? If false, they are assumed to start at\r\n                the same end.\r\n              </Form.Text>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n        <Form.Row>\r\n          <Col>\r\n            <Form.Group className=\"sm-3\" controlId=\"save\">\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Save Config\r\n              </Button>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n      </Form>\r\n    </div>\r\n  ) : (\r\n    <div>Choose a client from the list to configure it.</div>\r\n  );\r\n\r\n  return <div>{body}</div>;\r\n}\r\n","import { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { clientId, clientsList } from \"../recoil/clients\";\r\n\r\nexport function ClientList(props) {\r\n  const clientLists = useRecoilValue(clientsList);\r\n  const clientIdSetter = useSetRecoilState(clientId);\r\n\r\n  const selector = (e) => {\r\n    e.preventDefault();\r\n    clientIdSetter((oldId) => e.target.dataset.target);\r\n  };\r\n\r\n  const renderItem = (item) => {\r\n    return (\r\n      <div key={item.id} className=\"c-clients__single\">\r\n        <a href=\"clients-{item-id}\" data-target={item.id} onClick={selector}>\r\n          {item.id}\r\n        </a>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"c-clients\">\r\n      <h4>Client List:</h4>\r\n      {clientLists.map(renderItem)}\r\n    </div>\r\n  );\r\n}\r\n","import { Component, Suspense } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport { ClientConfigForm } from \"./ClientConfigForm\";\r\nimport { ClientList } from \"./ClientList\";\r\n\r\nexport default class ClientConfig extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { userId: 0 };\r\n  }\r\n\r\n  onClientSelect(e) {\r\n    e.preventDefault();\r\n    this.setState({ userId: e.target.dataset.target });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"u-pad--20\">\r\n          <h4>Client configuration manager</h4>\r\n        </div>\r\n        <Container fluid className=\"u-h--1\">\r\n          <Row className=\"u-h--1\">\r\n            <Col sm=\"2\" className=\"sidebar u-pad--20\">\r\n              <Suspense fallback={<div>Loading...</div>}>\r\n                <ClientList\r\n                  onClientSelect={this.onClientSelect.bind(this)}\r\n                ></ClientList>\r\n              </Suspense>\r\n            </Col>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Col className=\"u-pad--20\">\r\n                <ClientConfigForm clientId={this.state.userId} />\r\n              </Col>\r\n            </Suspense>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { useDraggable } from \"@dnd-kit/core\";\r\n\r\nexport function Draggable(props) {\r\n  const { attributes, listeners, setNodeRef, transform } = useDraggable({\r\n    id: props.id,\r\n  });\r\n  const style = transform\r\n    ? {\r\n        transform: `translate3d(${transform.x}px, ${transform.y}px, 0)`,\r\n      }\r\n    : undefined;\r\n\r\n  return (\r\n    <div title={props.alt} className=\"c-draggable\" ref={setNodeRef} style={style} {...listeners} {...attributes}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useDroppable } from \"@dnd-kit/core\";\r\n\r\nexport function Droppable(props) {\r\n  const { isOver, setNodeRef } = useDroppable({\r\n    id: props.dropId,\r\n  });\r\n\t\r\n  const style = {\r\n    color: isOver ? \"green\" : undefined,\r\n  };\r\n\r\n  return (\r\n    <div ref={setNodeRef} style={style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { DndContext } from \"@dnd-kit/core\";\r\nimport { Draggable } from \"./Draggable.jsx\";\r\nimport { Droppable } from \"./Droppable.jsx\";\r\nimport _ from \"underscore\";\r\n\r\nimport { useRecoilState } from \"recoil\";\r\nimport { imagesList } from \"../recoil/images.js\";\r\nimport { getBaseURL } from \"../recoil/constants\";\r\nimport { ToggleButton, ToggleButtonGroup } from \"react-bootstrap\";\r\n\r\nexport function ImageSorter(props) {\r\n  const [getImages] = useRecoilState(imagesList);\r\n\r\n  const [selectedIds, setSelectedIds] = useState([]);\r\n  const [getFilter, setFilter] = useState(\"\");\r\n  const [getMode, setMode] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setSelectedIds(_.uniq(props.selectedImageIds));\r\n  }, [props.selectedImageIds]);\r\n\r\n  const handleFilter = function (e) {\r\n    setFilter(e.target.value);\r\n  };\r\n  const clearFilter = function (e) {\r\n    setFilter(\"\");\r\n  };\r\n\r\n  //console.log(`using props.selectedImageIds: ${props.selectedImageIds}`);\r\n  // console.log({ selectedIds });\r\n\r\n  const generateImages = (status) => {\r\n    let source;\r\n    const uniqueSelected = _.uniq(selectedIds);\r\n    if (status === \"selected\") {\r\n      source = _.compact(\r\n        _.map(uniqueSelected, (id) => _.findWhere(getImages, { id }))\r\n      );\r\n    } else {\r\n      source = _.filter(\r\n        getImages,\r\n        (image) => uniqueSelected.indexOf(image.id) === -1\r\n      );\r\n      if (getFilter.length > 2)\r\n        source = _.filter(\r\n          source,\r\n          (item) => item.id.toLowerCase().indexOf(getFilter.toLowerCase()) > -1\r\n        );\r\n    }\r\n    return _.map(source, (image) => {\r\n      return (\r\n        <Draggable\r\n          id={image.id}\r\n          alt={image.id.replace(/.png|.gif|.jpg/g, \"\")}\r\n          key={image.id}\r\n        >\r\n          <div style={{ backgroundColor: props.backgroundColor }}>\r\n            <img\r\n              className=\"c-draggable-image\"\r\n              alt={image.id.replace(/.png|.gif|.jpg/g, \"\")}\r\n              src={`${getBaseURL()}${image.path}`}\r\n            />\r\n          </div>\r\n        </Draggable>\r\n      );\r\n    });\r\n  };\r\n\r\n  const setOperationMode = function (choice) {\r\n    console.log(`clicked: ${choice}`);\r\n    setMode(choice);\r\n  };\r\n\r\n  return (\r\n    <DndContext onDragEnd={handleDragEnd}>\r\n      <ToggleButtonGroup\r\n        value={getMode}\r\n        name=\"mode\"\r\n        className=\"mb-2\"\r\n        onChange={setOperationMode}\r\n      >\r\n        <ToggleButton id=\"add\" value=\"add\">\r\n          Add &amp; Remove\r\n        </ToggleButton>\r\n        <ToggleButton id=\"sort\" value=\"sort\">\r\n          Re-Order\r\n        </ToggleButton>\r\n      </ToggleButtonGroup>\r\n      <div className=\"c-draggable-list\">\r\n        <div className=\"c-draggable-list-header\">\r\n          <div className=\"c-draggable-list-label\">Selected Images</div>\r\n        </div>\r\n        <Droppable dropId=\"selectedImages\" className=\"drop-zone\">\r\n          <div className=\"c-draggable-list-items\">\r\n            {generateImages(\"selected\")}\r\n          </div>\r\n        </Droppable>\r\n      </div>\r\n      <div className=\"c-draggable-list\">\r\n        <div className=\"c-draggable-list-header\">\r\n          <div className=\"c-draggable-list-label\">All Images</div>\r\n          <div className=\"c-draggable-list-filter\">\r\n            Filter:{\" \"}\r\n            <input type=\"text\" onChange={handleFilter} value={getFilter} />\r\n            <div\r\n              className=\"c-draggable-list-filter-clear\"\r\n              onClick={clearFilter}\r\n            >\r\n              X\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <Droppable dropId=\"allImages\" className=\"drop-zone\">\r\n          <div className=\"c-draggable-list-items\">\r\n            {generateImages(\"unselected\")}\r\n          </div>\r\n        </Droppable>\r\n      </div>\r\n      {/*  <Droppable dropId=\"allImages\" className=\"drop-zone\">\r\n        {generateImages(\"unselected\")}\r\n      </Droppable> */}\r\n    </DndContext>\r\n  );\r\n\r\n  function handleDragEnd(event) {\r\n    let hasUpdated = false;\r\n    let newImageList;\r\n    if (event.over && event.over.id === \"selectedImages\") {\r\n      const draggedId = event.active.id;\r\n      const alreadySelected = _.contains(selectedIds, draggedId);\r\n      if (alreadySelected) return;\r\n      newImageList = selectedIds.slice();\r\n      newImageList.push(draggedId);\r\n      //   setSelectedIds(newImageList);\r\n      hasUpdated = true;\r\n    }\r\n    if (event.over && event.over.id === \"allImages\") {\r\n      console.log({ event });\r\n      const draggedId = event.active.id;\r\n      const alreadySelected = _.contains(selectedIds, draggedId);\r\n      if (!alreadySelected) return;\r\n      newImageList = _.clone(selectedIds);\r\n      newImageList.splice(selectedIds.indexOf(draggedId), 1);\r\n      //  setSelectedIds(newImageList);\r\n      hasUpdated = true;\r\n    }\r\n    if (hasUpdated) {\r\n      props.changeCallback(newImageList);\r\n    }\r\n  }\r\n}\r\n","import { Button, Modal } from \"react-bootstrap\";\r\n\r\nexport function ConfirmationModal(props) {\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Confirmation\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <p>\r\n          Are you sure you want to delete\r\n          <br />\r\n          the imageset `{props.title}`?\r\n        </p>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={props.onAccept}>Yes</Button>\r\n        <Button onClick={props.onDecline}>Cancel</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n","import {\r\n  IMAGESET_API_URL,\r\n  IMAGESET_API_URL_SINGULAR,\r\n} from \"../recoil/imagesets\";\r\n\r\nexport const saveImageSetsToServer = (passedState) => async () => {\r\n  const request = new Request(IMAGESET_API_URL, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(passedState),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  console.log({ request });\r\n\r\n  const promise = await fetch(request);\r\n  if (promise.success) {\r\n    console.log({ promise: promise });\r\n  }\r\n  return promise;\r\n};\r\n\r\nexport const deleteImageSetFromServer = (uid) => async () => {\r\n  const request = new Request(IMAGESET_API_URL_SINGULAR, {\r\n    method: \"delete\",\r\n    body: JSON.stringify({ uid }),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const promise = await fetch(request);\r\n  if (promise.success) {\r\n    console.log(\"image deleted OK\");\r\n  }\r\n  return promise;\r\n};\r\n","import { useRecoilState, useSetRecoilState } from \"recoil\";\r\nimport { editorImageset, imagesetId, imagesetsList } from \"../recoil/imagesets\";\r\nimport _ from \"underscore\";\r\nimport { Button, Col, Form } from \"react-bootstrap\";\r\nimport { ImageSorter } from \"./ImageSorter\";\r\nimport { ConfirmationModal } from \"./ConfirmationModal\";\r\nimport { useState } from \"react\";\r\n\r\nimport { ChromePicker } from \"react-color\";\r\n\r\nimport {\r\n  deleteImageSetFromServer,\r\n  saveImageSetsToServer,\r\n} from \"../utils/Actions\";\r\nimport { clientsList } from \"../recoil/clients\";\r\n\r\nexport function ImagesetConfigForm(props) {\r\n  const [localState, setLocalState] = useRecoilState(editorImageset);\r\n  const [imagesetlistData, imagesetsListSetter] = useRecoilState(imagesetsList);\r\n  const [confirmModalVisible, setConfirmModalVisible] = useState(false);\r\n  const [getClients] = useRecoilState(clientsList);\r\n  const setCurrentId = useSetRecoilState(imagesetId);\r\n\r\n  const handleColorChange = (color) => {\r\n    inputChanged({\r\n      target: { type: \"color\", name: \"backgroundColor\", value: color.hex },\r\n    });\r\n  };\r\n\r\n  const inputChanged = function (e) {\r\n    let newValue =\r\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\r\n    newValue = e.target.type === \"number\" ? parseInt(newValue) : newValue;\r\n    const newLocalState = _.defaults(\r\n      { [e.target.name]: newValue },\r\n      { ...localState }\r\n    );\r\n    setLocalState(newLocalState);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    // nothing to gather, just send it\r\n    e.preventDefault();\r\n    const allImagesetData = imagesetlistData.slice();\r\n    const oldObject = _.findWhere(allImagesetData, {\r\n      id: localState.id,\r\n    });\r\n    if (oldObject) {\r\n      const oldPos = allImagesetData.indexOf(oldObject);\r\n      allImagesetData.splice(oldPos, 1, localState);\r\n    } else {\r\n      // add to the end\r\n      allImagesetData.push(localState);\r\n    }\r\n    console.log({ saveImageSetsToServer });\r\n    saveImageSetsToServer(allImagesetData);\r\n\r\n    const call = saveImageSetsToServer(allImagesetData);\r\n    let finalresult = null;\r\n    call()\r\n      .then((res) => {\r\n        finalresult = res.json();\r\n        return finalresult;\r\n      })\r\n      .then((res) => {\r\n        finalresult = res;\r\n        console.log({ finalresult });\r\n        if (finalresult.success) {\r\n          imagesetsListSetter(allImagesetData);\r\n        }\r\n      });\r\n  };\r\n\r\n  const deleteCurrentConfig = (e) => {\r\n    const allImagesetData = imagesetlistData.slice();\r\n    const oldObject = _.findWhere(allImagesetData, {\r\n      id: localState.id,\r\n    });\r\n    if (oldObject) {\r\n      const oldPos = allImagesetData.indexOf(oldObject);\r\n      allImagesetData.splice(oldPos, 1);\r\n      const call = deleteImageSetFromServer(localState.id);\r\n      let finalresult = null;\r\n      call()\r\n        .then((res) => {\r\n          finalresult = res.json();\r\n          return finalresult;\r\n        })\r\n        .then((res) => {\r\n          finalresult = res;\r\n          console.log({ finalresult });\r\n          if (finalresult.success) {\r\n            setCurrentId(0);\r\n            imagesetsListSetter(allImagesetData);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  const imageSelectionChanged = (imageIdList) => {\r\n    setLocalState({ ...localState, images: imageIdList });\r\n  };\r\n\r\n  const body = !_.isEmpty(localState) ? (\r\n    <div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Row>\r\n          <Col sm=\"2\">\r\n            <Form.Group controlId=\"imagesetId\">\r\n              <Form.Label>Imageset ID</Form.Label>\r\n              <Form.Control\r\n                name=\"id\"\r\n                onChange={inputChanged}\r\n                type=\"text\"\r\n                value={localState.id}\r\n                disabled\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                squential counter, locked.\r\n              </Form.Text>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm=\"6\">\r\n            <Form.Group controlId=\"name\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                name=\"name\"\r\n                onChange={inputChanged}\r\n                value={localState.name}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm=\"2\">\r\n            <Form.Group controlId=\"duration\">\r\n              <Form.Label>Pixel duration</Form.Label>\r\n              <Form.Control\r\n                name=\"duration\"\r\n                onChange={inputChanged}\r\n                type=\"number\"\r\n                value={localState.duration}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Time each image displays for.\r\n              </Form.Text>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm=\"2\">\r\n            <Form.Group controlId=\"brightness\">\r\n              <Form.Label>Pixel brightness</Form.Label>\r\n              <Form.Control\r\n                name=\"brightness\"\r\n                onChange={inputChanged}\r\n                type=\"number\"\r\n                value={localState.brightness}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Time each image displays for.\r\n              </Form.Text>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n        <Form.Row>\r\n          <Col>\r\n            <Form.Group className=\"sm-3\" controlId=\"selectedClient\">\r\n              <Form.Label>Show this playlist on these clients:</Form.Label>\r\n              {getClients.map((client) => (\r\n                <Form.Check\r\n                  id={client.name}\r\n                  key={client.name}\r\n                  type=\"checkbox\"\r\n                  label={client.name}\r\n                  name=\"selectedClient\"\r\n                  onChange={inputChanged}\r\n                  value={client.id}\r\n                />\r\n              ))}\r\n            </Form.Group>\r\n          </Col>\r\n          <Col>\r\n            <Form.Group className=\"sm-3\" controlId=\"colorPicker\">\r\n              <Form.Label>Background colour</Form.Label>\r\n              <ChromePicker\r\n                alpha={false}\r\n                color={localState.backgroundColor || \"#000000\"}\r\n                onChange={handleColorChange}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n        <Form.Row>\r\n          <Col sm=\"2\">\r\n            <Form.Group className=\"sm-3\" controlId=\"save\">\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Save playlist\r\n              </Button>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm=\"2\">\r\n            <Form.Group>\r\n              <Button\r\n                variant=\"warning\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  setConfirmModalVisible(true);\r\n                }}\r\n              >\r\n                Delete playlist\r\n              </Button>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n\r\n        <ImageSorter\r\n          selectedImageIds={localState.images}\r\n          changeCallback={imageSelectionChanged}\r\n          backgroundColor={localState.backgroundColor || \"#000000\"}\r\n        />\r\n      </Form>\r\n      <ConfirmationModal\r\n        show={confirmModalVisible}\r\n        onAccept={(e) => {\r\n          setConfirmModalVisible(false);\r\n          deleteCurrentConfig();\r\n        }}\r\n        onDecline={() => setConfirmModalVisible(false)}\r\n        title={localState.name}\r\n      />{\" \"}\r\n    </div>\r\n  ) : (\r\n    <div>Choose a imageset from the list to configure it.</div>\r\n  );\r\n\r\n  return <div>{body}</div>;\r\n}\r\n","import { Button } from \"react-bootstrap\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport _ from \"underscore\";\r\nimport { formImageSet, imagesetId, imagesetsList } from \"../recoil/imagesets\";\r\n\r\nexport function ImagesetList(props) {\r\n  const imagesets = useRecoilValue(imagesetsList);\r\n  const imagesetIdSetter = useSetRecoilState(imagesetId);\r\n  const setCurrentFormData = useSetRecoilState(formImageSet);\r\n\r\n  const selector = (e) => {\r\n    e.preventDefault();\r\n    // clear existing object\r\n    setCurrentFormData({});\r\n    imagesetIdSetter((oldId) => parseInt(e.target.dataset.target));\r\n  };\r\n\r\n  const newImageset = (e) => {\r\n    const currentHighestId = _.max(_.pluck(imagesets, \"id\"));\r\n    console.log(imagesets);\r\n    // clear existing object\r\n    setCurrentFormData({});\r\n    imagesetIdSetter((oldId) =>\r\n      currentHighestId > 0 ? currentHighestId + 1 : 1\r\n    );\r\n  };\r\n\r\n  const renderItem = (item) => {\r\n    return (\r\n      <div key={item.id} className=\"c-clients__single\">\r\n        <a href=\"clients-{item-id}\" data-target={item.id} onClick={selector}>\r\n          {item.name}\r\n        </a>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"c-clients\">\r\n      <h4>Playlists:</h4>\r\n      <div>{imagesets.map(renderItem)}</div>\r\n      <Button\r\n        className=\"u-margin--top-20\"\r\n        onClick={newImageset}\r\n        variant=\"light\"\r\n        type=\"submit\"\r\n      >\r\n        New Playlist\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import { Component, Suspense } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport { ImagesetConfigForm } from \"./ImagesetConfigForm\";\r\nimport { ImagesetList } from \"./ImagesetList\";\r\n\r\nexport default class ImagesetConfig extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { userId: 0 };\r\n  }\r\n\r\n  onImagesetSelect(e) {\r\n    e.preventDefault();\r\n    this.setState({ userId: e.target.dataset.target });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"u-pad--20\">\r\n          <h4>Playlist manager</h4>\r\n        </div>\r\n        <Container fluid className=\"u-h--1\">\r\n          <Row className=\"u-h--1\">\r\n            <Col xs={2} className=\"sidebar u-pad--20\">\r\n              <Suspense fallback={<div>Loading...</div>}>\r\n                <ImagesetList\r\n                  className=\"u-h--1\"\r\n                  onImagesetSelect={this.onImagesetSelect.bind(this)}\r\n                ></ImagesetList>\r\n              </Suspense>\r\n            </Col>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Col className=\"u-pad--20\">\r\n                <ImagesetConfigForm ImagesetId={this.state.userId} />\r\n              </Col>\r\n            </Suspense>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Button, Col, Form } from \"react-bootstrap\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { useResetRecoilState, useSetRecoilState } from \"recoil\";\r\nimport _ from \"underscore\";\r\nimport { imagesList, IMAGE_UPLOAD_URL } from \"../recoil/images\";\r\n\r\nexport default function ImageLoader() {\r\n  // the file handles\r\n  const [form, setForm] = useState({ uploadDir: \"\" });\r\n  // the img tags generated from them\r\n  const [uploadedImages, setuploadedImages] = useState([]);\r\n  const resetImages = useResetRecoilState(imagesList);\r\n  const setImages = useSetRecoilState(imagesList);\r\n  //the completed uploads\r\n\r\n  useEffect(() => {});\r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    dealWithUploads(acceptedFiles);\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  const handleSubmit = function (e) {\r\n    e.preventDefault();\r\n    uploadSelectedFiles();\r\n  };\r\n  const inputChanged = function (e) {\r\n    let newValue =\r\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\r\n    newValue = e.target.type === \"number\" ? parseInt(newValue) : newValue;\r\n    const newLocalState = _.defaults(\r\n      { [e.target.name]: newValue },\r\n      { ...form }\r\n    );\r\n    setForm(newLocalState);\r\n  };\r\n\r\n  const dealWithUploads = async function (rawFileHandles) {\r\n    const promises = _.map(rawFileHandles, (upload) => {\r\n      return new Promise((resolve) => {\r\n        const reader = new FileReader();\r\n\r\n        reader.onabort = () => console.log(\"file reading was aborted\");\r\n        reader.onerror = () => console.log(\"file reading has failed\");\r\n        reader.onload = () =>\r\n          resolve({ uid: upload.path, file: upload, uri: reader.result });\r\n        reader.readAsDataURL(upload);\r\n      });\r\n    });\r\n    let result;\r\n    await Promise.all(promises).then((allDataURIs) => {\r\n      result = _.map(allDataURIs, (resultObj, fileIndex) => {\r\n        return {\r\n          uid: resultObj.uid,\r\n          element: (\r\n            <img alt={resultObj.uid} key={fileIndex} src={resultObj.uri} />\r\n          ),\r\n          file: resultObj.file,\r\n        };\r\n      });\r\n    });\r\n    console.log({ result });\r\n    setuploadedImages(result);\r\n  };\r\n  const uploadSelectedFiles = async () => {\r\n    const promises = _.map(uploadedImages, ({ file }) => {\r\n      const formData = new FormData();\r\n      formData.append(\"subdir\", form.uploadDir);\r\n      formData.append(\"file\", file);\r\n      console.log(`form.uploadDir: ${form.uploadDir}`);\r\n      const request = new Request(IMAGE_UPLOAD_URL, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers: {},\r\n      });\r\n\r\n      return fetch(request).then((res) => res.json());\r\n    });\r\n    Promise.all(promises)\r\n      .then((results) => {\r\n        let newUploads = _.clone(uploadedImages);\r\n        _.each(results, (uploadResult) => {\r\n          if (uploadResult.stats)\r\n            setImages((images) => {\r\n              const newImages = _.clone(images);\r\n              newImages.push(uploadResult.stats);\r\n              return newImages;\r\n            });\r\n          newUploads = _.filter(\r\n            newUploads,\r\n            (upload) => upload.uid !== uploadResult.uid\r\n          );\r\n        });\r\n        setuploadedImages(newUploads);\r\n      })\r\n      .then((result) => {\r\n        // force a refresh from the server;\r\n        resetImages();\r\n      });\r\n  };\r\n  const emptyMessage = _.isEmpty(uploadedImages) ? (\r\n    <p>Drag files here, or click to select files</p>\r\n  ) : (\r\n    <p></p>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"u-pad--top-20\">\r\n        <h4>Image uploader</h4>\r\n      </div>\r\n      <p>\r\n        Upload your images by dropping them into the area below. When you have\r\n        selected them, hit upload.\r\n      </p>\r\n\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Row>\r\n          <Col sm=\"4\">\r\n            <Form.Group controlId=\"uploadDir\">\r\n              <Form.Label>Upload subdirectory</Form.Label>\r\n              <Form.Control\r\n                name=\"uploadDir\"\r\n                onChange={inputChanged}\r\n                type=\"text\"\r\n                value={form.uploadDir}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Optional subdir to upload files - can make filtering easier..\r\n              </Form.Text>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n\r\n        <Form.Row>\r\n          <Col>\r\n            <div className=\"c-filedropzone\" {...getRootProps()}>\r\n              <input {...getInputProps()} />\r\n              <div className=\"c-filedropzone-inner\">\r\n                {isDragActive ? <p>Drop the files here ...</p> : emptyMessage}\r\n                <div className=\"upload\">\r\n                  {_.pluck(uploadedImages, \"element\")}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n        </Form.Row>\r\n        <Form.Row>\r\n          <Col>\r\n            <Form.Group className=\"sm-3 u-margin--top-20\" controlId=\"save\">\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Upload\r\n              </Button>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import \"./css/App.scss\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nimport { Header } from \"./components/Header\";\nimport { Component, Suspense } from \"react\";\nimport LinkList from \"./components/LinkList\";\nimport { Welcome } from \"./components/Welcome\";\nimport ClientConfig from \"./components/ClientConfig\";\nimport { RecoilRoot } from \"recoil\";\nimport ImagesetConfig from \"./components/ImagesetConfig\";\nimport ImageLoader from \"./components/ImageLoader\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { currentScreen: \"welcome\" };\n    this.linkClick = this.changeScreen.bind(this);\n  }\n  render() {\n    let mainContent;\n    console.log(`this.state.currentScreen: ${this.state.currentScreen}`);\n    switch (this.state.currentScreen) {\n      case \"imagesorter\":\n        mainContent = <ImagesetConfig />;\n        break;\n      case \"welcome\":\n        mainContent = <Welcome />;\n        break;\n      case \"clientconfig\":\n        mainContent = <ClientConfig />;\n        break;\n      case \"imageupload\":\n        mainContent = <ImageLoader />;\n        break;\n\n      default:\n        break;\n    }\n    return (\n      <RecoilRoot>\n        <div className=\"App full-height\">\n          <Container fluid className=\"c-header-background\">\n            <Container>\n              <Suspense fallback={<div>Loading...</div>}>\n                <Header title=\"Pixel grid admin\" homeclick={this.linkClick}>\n                  <LinkList\n                    onClick={this.linkClick}\n                    activeScreen={this.state.currentScreen}\n                  />\n                </Header>\n              </Suspense>\n            </Container>\n          </Container>\n          <Container className=\"u-h--1\">\n            <Row className=\"u-h--1\">\n              <Col className=\"u-pad--20\">{mainContent}</Col>\n            </Row>\n          </Container>\n        </div>\n      </RecoilRoot>\n    );\n  }\n\n  changeScreen(e) {\n    console.log(e);\n    e.preventDefault();\n    this.setState({ currentScreen: e.currentTarget.dataset.target });\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}