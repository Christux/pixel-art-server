{"version":3,"sources":["recoil/images.js","recoil/constants.js","components/Header.js","components/LinkList.js","components/Welcome.js","recoil/clients.js","recoil/playlists.js","utils/Actions.js","components/ClientConfigForm.js","components/ClientList.js","components/ClientConfig.js","components/Draggable.jsx","components/Droppable.jsx","components/ImageSorter.js","components/ConfirmationModal.js","components/PlaylistConfigForm.js","components/PlaylistList.js","components/PlaylistConfig.js","components/ImageLoader.js","App.js","reportWebVitals.js","index.js"],"names":["IMAGE_LIST_URL","IMAGE_UPLOAD_URL","imageId","atom","key","default","imageSelector","selector","get","imageIdValue","imageListValue","imagesList","_","findWhere","id","name","duration","images","a","console","log","fetch","then","res","json","apiData","set","data","anImage","allImages","thisImage","Math","round","random","length","Header","props","useRecoilState","anImageRef","className","Row","Col","xs","md","src","path","alt","title","children","LinkList","ButtonGroup","Button","variant","activeScreen","onClick","Welcome","CLIENT_API_URL","clientId","clientObject","clientIdValue","clientListValue","clientsList","clientSelector","PLAYLIST_API_URL","PLAYLIST_API_URL_SINGULAR","playlistId","formPlaylist","editorPlaylist","isEmpty","playlistIdValue","playlistsListValue","playlistsList","rData","clone","slice","emptyPlaylist","value","idValue","playlistSelector","saveClientsToServer","clientObjectData","request","Request","method","body","JSON","stringify","headers","promise","success","ClientConfigForm","clientlistData","clientsListSetter","playlists","inputChanged","e","allClientData","newValue","target","type","checked","parseInt","newClientObject","defaults","oldObject","oldPos","indexOf","splice","handleSubmit","preventDefault","returnedData","Form","onSubmit","sm","Group","controlId","Label","Control","onChange","disabled","Text","as","label","imagesetId","map","playlist","index","ClientList","clientLists","useRecoilValue","clientIdSetter","useSetRecoilState","oldId","dataset","item","href","ClientConfig","state","userId","this","setState","Container","fluid","fallback","onClientSelect","bind","Component","Draggable","useDraggable","attributes","listeners","setNodeRef","transform","style","x","y","undefined","ref","Droppable","useDroppable","dropId","isOver","color","ImageSorter","getImages","useState","selectedIds","setSelectedIds","getFilter","setFilter","getFolderFilter","setFolderFilter","useEffect","uniq","selectedImageIds","generateImages","status","source","uniqueSelected","compact","filter","image","toLowerCase","replace","backgroundColor","folders","split","Tabs","defaultActiveKey","Tab","eventKey","onDragEnd","event","newImageList","hasUpdated","over","draggedId","active","contains","push","changeCallback","folder","ConfirmationModal","Modal","size","centered","closeButton","Title","Body","Footer","onAccept","onDecline","PlaylistConfigForm","localState","setLocalState","playlistListData","playlistListSetter","confirmModalVisible","setConfirmModalVisible","getClients","setClients","setCurrentId","newLocalState","deleteCurrentConfig","uid","allPlaylistData","call","finalresult","passedState","savePlaylists","localClientsList","client","targetClient","targetClientId","saveClients","lg","alpha","hex","imageIdList","show","PlaylistList","playlistIdSetter","setCurrentFormData","currentHighestId","max","pluck","PlaylistConfig","onImagesetSelect","ImagesetId","ImageLoader","uploadDir","form","setForm","uploadedImages","setuploadedImages","useResetRecoilState","setImages","onDrop","useCallback","acceptedFiles","dealWithUploads","useDropzone","getRootProps","getInputProps","isDragActive","rawFileHandles","promises","upload","Promise","resolve","reader","FileReader","onabort","onerror","onload","file","uri","result","readAsDataURL","all","allDataURIs","resultObj","fileIndex","element","uploadSelectedFiles","formData","FormData","append","results","newUploads","each","uploadResult","stats","newImages","emptyMessage","App","currentScreen","linkClick","changeScreen","mainContent","homeclick","currentTarget","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ab38de4.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\nimport _ from \"underscore\";\r\nimport { getBaseURL } from \"./constants\";\r\n\r\nexport const IMAGE_LIST_URL = `${getBaseURL()}/images`;\r\nexport const IMAGE_UPLOAD_URL = `${getBaseURL()}/upload`;\r\n\r\nexport const imageFetching = atom({\r\n  key: \"imageFetching\",\r\n  default: false,\r\n});\r\n\r\nexport const imageId = atom({\r\n  key: \"imageId\",\r\n  default: 0,\r\n});\r\n\r\nexport const imageObject = selector({\r\n  key: \"imageObject\",\r\n  get: ({ get }) => {\r\n    const imageIdValue = get(imageId);\r\n    const imageListValue = get(imagesList);\r\n    if (!imageIdValue) return;\r\n    return (\r\n      _.findWhere(imageListValue, { id: imageIdValue }) || {\r\n        id: imageIdValue,\r\n        name: \"\",\r\n        duration: 10,\r\n        images: [],\r\n      }\r\n    );\r\n  },\r\n});\r\n\r\nexport const imageSelector = selector({\r\n  key: \"imageSelector\",\r\n  get: async () => {\r\n    console.log('imageSelector inited')\r\n    debugger;\r\n    const apiData = await fetch(IMAGE_LIST_URL).then((res) => res.json());\r\n    return apiData;\r\n  },\r\n  set: ({ set }, data) => {\r\n    set(imagesList, data);\r\n  },\r\n});\r\n\r\nexport const imagesList = atom({\r\n  key: \"imagesList\",\r\n  default: imageSelector,\r\n});\r\n\r\nexport const anImage = selector({\r\n  key: \"randomImage\",\r\n  get: ({ get }) => {\r\n    const allImages = get(imagesList);\r\n    const thisImage =\r\n      allImages[Math.round(Math.random() * 100000) % allImages.length];\r\n    console.log({ thisImage });\r\n    return thisImage;\r\n  },\r\n});\r\n","export const API_BASE_URL = \"http://localhost:8000\";\r\n\r\nexport function getBaseURL() {\r\n  return process.env.NODE_ENV === \"production\"\r\n    ? \"\"\r\n    : \"http://localhost:8000\";\r\n}\r\n","import { Col, Row } from \"react-bootstrap\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { getBaseURL } from \"../recoil/constants\";\r\nimport { anImage } from \"../recoil/images\";\r\n\r\nexport function Header(props) {\r\n  const [anImageRef] = useRecoilState(anImage);\r\n\r\n  return (\r\n    <div className=\"c-header u-pad--20 u-flex u-flex--align-center u-flex--justify-between\">\r\n      <Row className=\"u-w--1\">\r\n        <Col xs={12} md={6} className=\"u-margin--bottom-20\">\r\n          <div className=\"c-header-branding u-flex u-flex--align-center\">\r\n            <div\r\n              className=\"home-link u-flex u-cursor--pointer\"\r\n              data-target=\"welcome\"\r\n            >\r\n              <img\r\n                className=\"u-margin--right-20\"\r\n                src={getBaseURL() + anImageRef?.path}\r\n                alt={anImageRef?.path}\r\n              />\r\n              <h2 className=\"c-header-title u-margin--bottom-0\">\r\n                {props.title}\r\n              </h2>\r\n            </div>\r\n          </div>\r\n        </Col>\r\n        <Col xs={12} md={6}>\r\n          <div className=\"c-header-links sm-3 col-xs-12\">{props.children}</div>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n","import { Button, ButtonGroup } from \"react-bootstrap\";\r\n\r\nexport default function LinkList(props) {\r\n  return (\r\n    <ButtonGroup className=\"c-link-list\" aria-label=\"First group\">\r\n      <Button\r\n        variant=\"light\"\r\n        className={props.activeScreen === \"imageupload\" ? \"is-active\" : \"\"}\r\n        data-target=\"imageupload\"\r\n        onClick={props.onClick}\r\n      >\r\n        Images\r\n      </Button>\r\n      <Button\r\n        variant=\"light\"\r\n        className={props.activeScreen === \"clientconfig\" ? \"is-active\" : \"\"}\r\n        data-target=\"clientconfig\"\r\n        onClick={props.onClick}\r\n      >\r\n        Clients\r\n      </Button>\r\n      <Button\r\n        variant=\"light\"\r\n        className={props.activeScreen === \"imagesorter\" ? \"is-active\" : \"\"}\r\n        data-target=\"imagesorter\"\r\n        onClick={props.onClick}\r\n      >\r\n        Playlists\r\n      </Button>\r\n    </ButtonGroup>\r\n  );\r\n}\r\n","export function Welcome(props) {\r\n  return (\r\n    <div className=\"u-pad--20\">\r\n      <p>Choose a function from the options above to get started.</p>\r\n      <ul>\r\n        <li>Images - upload images to display</li>\r\n        <li>Clients - configure clients for correct image display</li>\r\n        <li>\r\n          Playlists - arrange one or more images into a sequence, adjust timings\r\n          etc.\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n","import { atom, selector } from \"recoil\";\r\nimport _ from \"underscore\";\r\nimport { getBaseURL } from \"./constants\";\r\n\r\nexport const CLIENT_API_URL = `${getBaseURL()}/clients`;\r\nexport const CLIENT_PLAYLIST_API_URL = `${getBaseURL()}/client_playlists`;\r\n\r\nexport const clientFetching = atom({\r\n  key: \"clientFetching\",\r\n  default: false,\r\n});\r\n\r\nexport const clientId = atom({\r\n  key: \"clientId\",\r\n  default: 0,\r\n});\r\n\r\nexport const clientObject = selector({\r\n  key: \"clientObject\",\r\n  get: ({ get }) => {\r\n    const clientIdValue = get(clientId);\r\n    const clientListValue = get(clientsList);\r\n    if (!clientIdValue) return;\r\n    return _.findWhere(clientListValue, { id: clientIdValue });\r\n  },\r\n});\r\n\r\nexport const clientSelector = selector({\r\n  key: \"clientSelector\",\r\n  get: async () => {\r\n    const apiData = await fetch(CLIENT_API_URL).then((res) => res.json());\r\n    return apiData;\r\n  },\r\n  set: ({ set }, data) => {\r\n    set(clientsList, data);\r\n  },\r\n});\r\n\r\nexport const clientsList = atom({\r\n  key: \"clientsList\",\r\n  default: clientSelector,\r\n});\r\n","import { atom, selector } from \"recoil\";\r\nimport _ from \"underscore\";\r\nimport { getBaseURL } from \"./constants\";\r\n\r\nexport const PLAYLIST_API_URL = `${getBaseURL()}/imagesets`;\r\nexport const PLAYLIST_API_URL_SINGULAR = `${getBaseURL()}/imageset`;\r\n\r\nexport const playlistFetching = atom({\r\n  key: \"playlistFetching\",\r\n  default: false,\r\n});\r\n\r\nexport const playlistId = atom({\r\n  key: \"playlistId\",\r\n  default: 0,\r\n});\r\n\r\nexport const formPlaylist = atom({\r\n  key: \"formPlaylist\",\r\n  default: {},\r\n});\r\n\r\nexport const editorPlaylist = selector({\r\n  key: \"playlistObject\",\r\n  get: ({ get }) => {\r\n    if (!_.isEmpty(get(formPlaylist))) return get(formPlaylist);\r\n    const playlistIdValue = get(playlistId);\r\n    const playlistsListValue = get(playlistsList);\r\n    if (!playlistIdValue) return;\r\n    const rData = _.clone(\r\n      _.findWhere(playlistsListValue, { id: playlistIdValue })\r\n    );\r\n    if (rData) {\r\n      rData.images = rData.images ? rData.images.slice() : [];\r\n      return rData;\r\n    } else {\r\n      return emptyPlaylist(playlistIdValue);\r\n    }\r\n  },\r\n  set: ({ set }, value) => {\r\n    set(formPlaylist, value);\r\n  },\r\n});\r\n\r\nexport const emptyPlaylist = (idValue) => {\r\n  return {\r\n    id: idValue,\r\n    name: \"\",\r\n    duration: 10,\r\n    images: [],\r\n  };\r\n};\r\n\r\nexport const playlistSelector = selector({\r\n  key: \"playlistSelector\",\r\n  get: async () => {\r\n    const apiData = await fetch(PLAYLIST_API_URL).then((res) => res.json());\r\n    return apiData;\r\n  },\r\n  set: ({ set }, data) => {\r\n    set(playlistsList, data);\r\n  },\r\n});\r\n\r\nexport const playlistsList = atom({\r\n  key: \"PlaylistList\",\r\n  default: playlistSelector,\r\n});\r\n","import {\r\n  PLAYLIST_API_URL,\r\n  PLAYLIST_API_URL_SINGULAR,\r\n} from \"../recoil/playlists\";\r\nimport { CLIENT_PLAYLIST_API_URL, CLIENT_API_URL } from \"../recoil/clients\";\r\n\r\nexport const saveClientsToServer = (clientObjectData) => async () => {\r\n  const request = new Request(CLIENT_API_URL, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(clientObjectData),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      // 'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n  });\r\n\r\n  const promise = await fetch(request);\r\n  if (promise.success) {\r\n    console.log({ promise: promise });\r\n  }\r\n  return promise;\r\n};\r\n\r\nexport const updateClientPlayListsToServer = (allClientData) => async () => {\r\n  const request = new Request(CLIENT_PLAYLIST_API_URL, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(allClientData),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n      // 'Content-Type': 'application/x-www-form-urlencoded',\r\n    },\r\n  });\r\n\r\n  const promise = await fetch(request);\r\n  if (promise.success) {\r\n    console.log({ promise: promise });\r\n  }\r\n  return promise;\r\n};\r\n\r\nexport const savePlaylistsToServer = (passedState) => async () => {\r\n  const request = new Request(PLAYLIST_API_URL, {\r\n    method: \"POST\",\r\n    body: JSON.stringify(passedState),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n  console.log({ request });\r\n\r\n  const promise = await fetch(request);\r\n  if (promise.success) {\r\n    console.log({ promise: promise });\r\n  }\r\n  return promise;\r\n};\r\n\r\nexport const deletePlaylistFromServer = (uid) => async () => {\r\n  const request = new Request(PLAYLIST_API_URL_SINGULAR, {\r\n    method: \"delete\",\r\n    body: JSON.stringify({ uid }),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  });\r\n\r\n  const promise = await fetch(request);\r\n  if (promise.success) {\r\n    console.log(\"image deleted OK\");\r\n  }\r\n  return promise;\r\n};\r\n","import { useRecoilState } from \"recoil\";\r\nimport { clientObject, clientsList } from \"../recoil/clients\";\r\nimport _ from \"underscore\";\r\nimport { Button, Col, Form } from \"react-bootstrap\";\r\nimport { playlistsList } from \"../recoil/playlists\";\r\nimport { saveClientsToServer } from \"../utils/Actions\";\r\n\r\nexport function ClientConfigForm(props) {\r\n  const [clientObjectData] = useRecoilState(clientObject);\r\n  const [clientlistData, clientsListSetter] = useRecoilState(clientsList);\r\n  const [playlists] = useRecoilState(playlistsList);\r\n\r\n  const inputChanged = function (e) {\r\n    const allClientData = clientlistData.slice();\r\n\r\n    let newValue =\r\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\r\n    newValue = e.target.type === \"number\" ? parseInt(newValue) : newValue;\r\n\r\n    const newClientObject = _.defaults(\r\n      { [e.target.name]: newValue },\r\n      { ...clientObjectData }\r\n    );\r\n    const oldObject = _.findWhere(allClientData, { id: newClientObject.id });\r\n    const oldPos = allClientData.indexOf(oldObject);\r\n    allClientData.splice(oldPos, 1, newClientObject);\r\n    clientsListSetter(allClientData);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    // nothing to gather, just send it\r\n    e.preventDefault();\r\n    const request = saveClientsToServer(clientObjectData);\r\n    const returnedData = request().then((res) => res.json());\r\n    console.log(returnedData);\r\n    //setClientSelector(returnedData);\r\n  };\r\n\r\n  const body = clientObjectData ? (\r\n    /* \"id\": \"one\", \r\n\t\t\"pixelsCount\": 1024,\r\n\t\t\"width\" : 32,\r\n\t\t\"height\" : 32,\r\n\t\t\"direction\" : \"horizontal\",\r\n\t\t\"zigzag\" : true,\r\n\t\t\"start\" : \"top\"  */\r\n    <div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Row>\r\n          <Col sm=\"6\">\r\n            <Form.Group controlId=\"clientId\">\r\n              <Form.Label>Client Name</Form.Label>\r\n              <Form.Control\r\n                name=\"name\"\r\n                onChange={inputChanged}\r\n                type=\"text\"\r\n                value={clientObjectData.name}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n\r\n          <Col sm=\"3\">\r\n            <Form.Group controlId=\"clientId\">\r\n              <Form.Label>Client ID</Form.Label>\r\n              <Form.Control\r\n                name=\"id\"\r\n                onChange={inputChanged}\r\n                type=\"text\"\r\n                value={clientObjectData.id}\r\n                disabled\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Set in client, locked.\r\n              </Form.Text>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n\r\n\r\n        <Form.Row>\r\n          <Col>\r\n            <Form.Group className=\"sm-3\" controlId=\"imagesetId\">\r\n              <Form.Control\r\n                as=\"select\"\r\n                label=\"Zigzag rows\"\r\n                name=\"imagesetId\"\r\n                onChange={inputChanged}\r\n                value={clientObjectData.imagesetId}\r\n              >\r\n                {playlists.map((playlist, index) => (\r\n                  <option key={index} value={playlist.id}>\r\n                    {playlist.name}\r\n                  </option>\r\n                ))}\r\n              </Form.Control>\r\n              <Form.Text className=\"text-muted\">\r\n                Choose the playlist to show on this screen.\r\n              </Form.Text>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col>\r\n          </Col>\r\n        </Form.Row>\r\n        <Form.Row>\r\n          <Col>\r\n            <Form.Group className=\"sm-3\" controlId=\"save\">\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Save Config\r\n              </Button>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n      </Form>\r\n    </div>\r\n  ) : (\r\n    <div>Choose a client from the list to configure it.</div>\r\n  );\r\n\r\n  return <div>{body}</div>;\r\n}\r\n","import { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { clientId, clientsList } from \"../recoil/clients\";\r\nimport _ from \"underscore\";\r\n\r\n\r\n\r\nexport function ClientList(props) {\r\n  const clientLists = useRecoilValue(clientsList);\r\n  const clientIdSetter = useSetRecoilState(clientId);\r\n\r\n  const selector = (e) => {\r\n    e.preventDefault();\r\n    clientIdSetter((oldId) => e.target.dataset.target);\r\n  };\r\n\r\n  const renderItem = (item) => {\r\n    return (\r\n      <div key={item.id} className=\"c-clients__single\">\r\n        <a href=\"clients-{item-id}\" data-target={item.id} onClick={selector}>\r\n          {item.name} ({item.id})\r\n        </a>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"c-clients\">\r\n      <h4>Client List:</h4>\r\n      {_.isEmpty(clientLists) ? '-- no clients registered --' : clientLists.map(renderItem)}\r\n    </div>\r\n  );\r\n}\r\n","import { Component, Suspense } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport { ClientConfigForm } from \"./ClientConfigForm\";\r\nimport { ClientList } from \"./ClientList\";\r\n\r\nexport default class ClientConfig extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { userId: 0 };\r\n  }\r\n\r\n  onClientSelect(e) {\r\n    e.preventDefault();\r\n    this.setState({ userId: e.target.dataset.target });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"u-pad--20\">\r\n          <h4>Client configuration manager</h4>\r\n        </div>\r\n        <Container fluid className=\"u-h--1\">\r\n          <Row className=\"u-h--1\">\r\n            <Col sm=\"12\" md={3} className=\"sidebar u-pad--20\">\r\n              <Suspense fallback={<div>Loading...</div>}>\r\n                <ClientList\r\n                  onClientSelect={this.onClientSelect.bind(this)}\r\n                ></ClientList>\r\n              </Suspense>\r\n            </Col>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Col className=\"u-pad--20\">\r\n                <ClientConfigForm clientId={this.state.userId} />\r\n              </Col>\r\n            </Suspense>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { useDraggable } from \"@dnd-kit/core\";\r\n\r\nexport function Draggable(props) {\r\n  const { attributes, listeners, setNodeRef, transform } = useDraggable({\r\n    id: props.id,\r\n  });\r\n  const style = transform\r\n    ? {\r\n        transform: `translate3d(${transform.x}px, ${transform.y}px, 0)`,\r\n      }\r\n    : undefined;\r\n\r\n  return (\r\n    <div title={props.alt} className=\"c-draggable\" ref={setNodeRef} style={style} {...listeners} {...attributes}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useDroppable } from \"@dnd-kit/core\";\r\n\r\nexport function Droppable(props) {\r\n  const { isOver, setNodeRef } = useDroppable({\r\n    id: props.dropId,\r\n  });\r\n\t\r\n  const style = {\r\n    color: isOver ? \"green\" : undefined,\r\n  };\r\n\r\n  return (\r\n    <div ref={setNodeRef} style={style}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { DndContext } from \"@dnd-kit/core\";\r\nimport { Draggable } from \"./Draggable.jsx\";\r\nimport { Droppable } from \"./Droppable.jsx\";\r\nimport _ from \"underscore\";\r\n\r\nimport { useRecoilState } from \"recoil\";\r\nimport { imagesList } from \"../recoil/images.js\";\r\nimport { getBaseURL } from \"../recoil/constants\";\r\nimport { Row, Tab, Tabs } from \"react-bootstrap\";\r\n\r\nexport function ImageSorter(props) {\r\n  const [getImages] = useRecoilState(imagesList);\r\n\r\n  const [selectedIds, setSelectedIds] = useState([]);\r\n  const [getFilter, setFilter] = useState(\"\");\r\n  const [getFolderFilter, setFolderFilter] = useState(\"\");\r\n  const [setMode] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setSelectedIds(_.uniq(props.selectedImageIds));\r\n  }, [props.selectedImageIds]);\r\n\r\n  const handleFilter = function (e) {\r\n    setFilter(e.target.value);\r\n  };\r\n  const clearFilter = function (e) {\r\n    setFilter(\"\");\r\n  };\r\n\r\n  const generateFolderList = () =>\r\n    _.compact(\r\n      _.uniq(\r\n        _.map(getImages, (name) =>\r\n          name.id.split(\"/\").length === 1 ? false : name.id.split(\"/\")[0]\r\n        )\r\n      )\r\n    );\r\n\r\n  const handleFolderFilter = function (e) {\r\n    setFolderFilter(e.target.value);\r\n  };\r\n  const clearFolderFilter = function (e) {\r\n    setFolderFilter(\"\");\r\n  };\r\n\r\n  //console.log(`using props.selectedImageIds: ${props.selectedImageIds}`);\r\n  // console.log({ selectedIds });\r\n\r\n  const generateImages = (status) => {\r\n    let source;\r\n    const uniqueSelected = _.uniq(selectedIds);\r\n    if (status === \"selected\") {\r\n      source = _.compact(\r\n        _.map(uniqueSelected, (id) => _.findWhere(getImages, { id }))\r\n      );\r\n    } else {\r\n      source = _.filter(\r\n        getImages,\r\n        (image) => uniqueSelected.indexOf(image.id) === -1\r\n      );\r\n      if (getFilter.length > 2)\r\n        source = _.filter(\r\n          source,\r\n          (item) => item.id.toLowerCase().indexOf(getFilter.toLowerCase()) > -1\r\n        );\r\n      if (getFolderFilter !== \"\")\r\n        source = _.filter(\r\n          source,\r\n          (item) => item.id.indexOf(getFolderFilter) > -1\r\n        );\r\n    }\r\n    return _.map(source, (image) => {\r\n      return (\r\n        <Draggable\r\n          id={image.id}\r\n          alt={image.id.replace(/.png|.gif|.jpg/g, \"\")}\r\n          key={image.id}\r\n        >\r\n          <div style={{ backgroundColor: props.backgroundColor }}>\r\n            <img\r\n              className=\"c-draggable-image\"\r\n              alt={image.id.replace(/.png|.gif|.jpg/g, \"\")}\r\n              src={`${getBaseURL()}${image.path}`}\r\n            />\r\n          </div>\r\n        </Draggable>\r\n      );\r\n    });\r\n  };\r\n\r\n  const setOperationMode = function (choice) {\r\n    setMode(choice);\r\n  };\r\n\r\n  const folders = generateFolderList();\r\n\r\n  return (\r\n    <Tabs defaultActiveKey=\"add-remove\" id=\"uncontrolled-tab-example\">\r\n      <Tab eventKey=\"add-remove\" title=\"Add / Remove\">\r\n        <DndContext onDragEnd={handleDragEnd}>\r\n          {/* slected images */}\r\n          <div className=\"c-draggable-list\">\r\n            <div className=\"c-draggable-list-header\">\r\n              <div className=\"c-draggable-list-label\">Selected Images</div>\r\n            </div>\r\n            <Droppable dropId=\"selectedImages\" className=\"drop-zone\">\r\n              <div className=\"c-draggable-list-items\">\r\n                {generateImages(\"selected\")}\r\n              </div>\r\n            </Droppable>\r\n          </div>\r\n          {/* all images */}\r\n          <div className=\"c-draggable-list\">\r\n            <div className=\"c-draggable-list-header\">\r\n              <Row>\r\n                <div className=\"c-draggable-list-label col-sm-12\">\r\n                  All Images\r\n                </div>\r\n              </Row>\r\n              <Row>\r\n                <div className=\"c-draggable-list-filter col-sm-12 col-md-6\">\r\n                  Subdir:{\" \"}\r\n                  <select\r\n                    className=\"u-flex--1\"\r\n                    onChange={handleFolderFilter}\r\n                    value={getFolderFilter}\r\n                  >\r\n                    <option value=\"\">-- all --</option>\r\n                    {_.map(folders, (folder) => (\r\n                      <option value={folder}>{folder}</option>\r\n                    ))}\r\n                  </select>\r\n                  <div\r\n                    className=\"c-draggable-list-filter-clear\"\r\n                    onClick={clearFolderFilter}\r\n                  >\r\n                    X\r\n                  </div>\r\n                </div>\r\n                <div className=\"c-draggable-list-filter col-sm-12 col-md-6\">\r\n                  Filter:{\" \"}\r\n                  <input\r\n                    type=\"text\"\r\n                    onChange={handleFilter}\r\n                    value={getFilter}\r\n                    className=\"u-flex--1\"\r\n                  />\r\n                  <div\r\n                    className=\"c-draggable-list-filter-clear\"\r\n                    onClick={clearFilter}\r\n                  >\r\n                    X\r\n                  </div>\r\n                </div>\r\n              </Row>\r\n            </div>\r\n            <Droppable dropId=\"allImages\" className=\"drop-zone\">\r\n              <div className=\"c-draggable-list-items\">\r\n                {generateImages(\"unselected\")}\r\n              </div>\r\n            </Droppable>\r\n          </div>\r\n          {/*  <Droppable dropId=\"allImages\" className=\"drop-zone\">\r\n        {generateImages(\"unselected\")}\r\n      </Droppable> */}\r\n        </DndContext>\r\n      </Tab>\r\n      <Tab eventKey=\"reorder\" title=\"Re-Order\">\r\n        <p>This feature not implemented yet</p>\r\n      </Tab>\r\n    </Tabs>\r\n  );\r\n\r\n  function handleDragEnd(event) {\r\n    let hasUpdated = false;\r\n    let newImageList;\r\n    if (event.over && event.over.id === \"selectedImages\") {\r\n      const draggedId = event.active.id;\r\n      const alreadySelected = _.contains(selectedIds, draggedId);\r\n      if (alreadySelected) return;\r\n      newImageList = selectedIds.slice();\r\n      newImageList.push(draggedId);\r\n      //   setSelectedIds(newImageList);\r\n      hasUpdated = true;\r\n    }\r\n    if (event.over && event.over.id === \"allImages\") {\r\n      console.log({ event });\r\n      const draggedId = event.active.id;\r\n      const alreadySelected = _.contains(selectedIds, draggedId);\r\n      if (!alreadySelected) return;\r\n      newImageList = _.clone(selectedIds);\r\n      newImageList.splice(selectedIds.indexOf(draggedId), 1);\r\n      //  setSelectedIds(newImageList);\r\n      hasUpdated = true;\r\n    }\r\n    if (hasUpdated) {\r\n      props.changeCallback(newImageList);\r\n    }\r\n  }\r\n}\r\n","import { Button, Modal } from \"react-bootstrap\";\r\n\r\nexport function ConfirmationModal(props) {\r\n  return (\r\n    <Modal\r\n      {...props}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title id=\"contained-modal-title-vcenter\">\r\n          Confirmation\r\n        </Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <p>\r\n          Are you sure you want to delete\r\n          <br />\r\n          the imageset `{props.title}`?\r\n        </p>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button onClick={props.onAccept}>Yes</Button>\r\n        <Button onClick={props.onDecline}>Cancel</Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n}\r\n","import { useRecoilState, useSetRecoilState } from \"recoil\";\r\nimport { editorPlaylist, playlistId, playlistsList } from \"../recoil/playlists\";\r\nimport { clientsList } from \"../recoil/clients\";\r\nimport _ from \"underscore\";\r\nimport { Button, Col, Form } from \"react-bootstrap\";\r\nimport { ImageSorter } from \"./ImageSorter\";\r\nimport { ConfirmationModal } from \"./ConfirmationModal\";\r\nimport { useState } from \"react\";\r\n\r\nimport { ChromePicker } from \"react-color\";\r\n\r\nimport {\r\n  deletePlaylistFromServer,\r\n  saveClientsToServer,\r\n  savePlaylistsToServer,\r\n} from \"../utils/Actions\";\r\n\r\nexport function PlaylistConfigForm(props) {\r\n  const [localState, setLocalState] = useRecoilState(editorPlaylist);\r\n  const [playlistListData, playlistListSetter] = useRecoilState(playlistsList);\r\n  const [confirmModalVisible, setConfirmModalVisible] = useState(false);\r\n  const [getClients, setClients] = useRecoilState(clientsList);\r\n  const setCurrentId = useSetRecoilState(playlistId);\r\n\r\n  const handleColorChange = (color) => {\r\n    inputChanged({\r\n      target: { type: \"color\", name: \"backgroundColor\", value: color.hex },\r\n    });\r\n  };\r\n\r\n  const inputChanged = function (e) {\r\n    let newValue =\r\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\r\n    newValue = e.target.type === \"number\" ? parseInt(newValue) : newValue;\r\n    const newLocalState = _.defaults(\r\n      { [e.target.name]: newValue },\r\n      { ...localState }\r\n    );\r\n    console.log({ newLocalState });\r\n    setLocalState(newLocalState);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    // nothing to gather, just send it\r\n    e.preventDefault();\r\n    // clone it\r\n    const allPlaylistData = playlistListData.slice();\r\n    const oldObject = _.findWhere(allPlaylistData, {\r\n      id: localState.id,\r\n    });\r\n    if (oldObject) {\r\n      const oldPos = allPlaylistData.indexOf(oldObject);\r\n      allPlaylistData.splice(oldPos, 1, localState);\r\n    } else {\r\n      // add to the end\r\n      allPlaylistData.push(localState);\r\n    }\r\n\r\n    // update clients\r\n\r\n    const savePlaylists = savePlaylistsToServer(allPlaylistData);\r\n    let finalresult = null;\r\n    savePlaylists()\r\n      .then((res) => {\r\n        finalresult = res.json();\r\n        return finalresult;\r\n      })\r\n      .then((res) => {\r\n        finalresult = res;\r\n        console.log({ finalresult });\r\n        if (finalresult.success) {\r\n          playlistListSetter(allPlaylistData);\r\n        }\r\n      });\r\n\r\n    const localClientsList = _.map(getClients, (client) => _.clone(client));\r\n    // find only the \"client_\" values\r\n\r\n    const targetClient = _.findWhere(localClientsList, {\r\n      id: localState.targetClientId,\r\n    });\r\n    if (targetClient) {\r\n      targetClient.imagesetId = localState.id;\r\n      const saveClients = saveClientsToServer(targetClient);\r\n      saveClients(clientsList)\r\n        .then((res) => {\r\n          finalresult = res.json();\r\n          return finalresult;\r\n        })\r\n        .then((res) => {\r\n          finalresult = res;\r\n          console.log({ finalresult });\r\n          setClients(localClientsList);\r\n        });\r\n    }\r\n  };\r\n\r\n  const deleteCurrentConfig = (e) => {\r\n    const allPlaylistData = playlistListData.slice();\r\n    const oldObject = _.findWhere(allPlaylistData, {\r\n      id: localState.id,\r\n    });\r\n    if (oldObject) {\r\n      const oldPos = allPlaylistData.indexOf(oldObject);\r\n      allPlaylistData.splice(oldPos, 1);\r\n      const call = deletePlaylistFromServer(localState.id);\r\n      let finalresult = null;\r\n      call()\r\n        .then((res) => {\r\n          finalresult = res.json();\r\n          return finalresult;\r\n        })\r\n        .then((res) => {\r\n          finalresult = res;\r\n          console.log({ finalresult });\r\n          if (finalresult.success) {\r\n            setCurrentId(0);\r\n            playlistListSetter(allPlaylistData);\r\n          }\r\n        });\r\n    }\r\n  };\r\n\r\n  const imageSelectionChanged = (imageIdList) => {\r\n    setLocalState({ ...localState, images: imageIdList });\r\n  };\r\n\r\n  // inject playlist statuses into localState\r\n\r\n  const body = !_.isEmpty(localState) ? (\r\n    <div>\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Row>\r\n          <Col lg={2} md={6}>\r\n            <Form.Group controlId=\"imagesetId\">\r\n              <Form.Label>playlist ID</Form.Label>\r\n              <Form.Control\r\n                name=\"id\"\r\n                onChange={inputChanged}\r\n                type=\"text\"\r\n                value={localState.id}\r\n                disabled\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                squential counter, locked.\r\n              </Form.Text>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col lg={5} md={6}>\r\n            <Form.Group controlId=\"name\">\r\n              <Form.Label>Name</Form.Label>\r\n              <Form.Control\r\n                name=\"name\"\r\n                onChange={inputChanged}\r\n                value={localState.name}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n          <Col lg={2} md={6}>\r\n            <Form.Group controlId=\"duration\">\r\n              <Form.Label>Image duration</Form.Label>\r\n              <Form.Control\r\n                name=\"duration\"\r\n                onChange={inputChanged}\r\n                type=\"number\"\r\n                value={localState.duration}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Time each image displays for (seconds).\r\n              </Form.Text>\r\n            </Form.Group>\r\n          </Col>\r\n          {/* <Col lg={2} md={6}>\r\n            <Form.Group controlId=\"brightness\">\r\n              <Form.Label>Pixel brightness</Form.Label>\r\n              <Form.Control\r\n                name=\"brightness\"\r\n                onChange={inputChanged}\r\n                type=\"number\"\r\n                value={localState.brightness}\r\n              />\r\n              <Form.Text className=\"text-muted\">1-255</Form.Text>\r\n            </Form.Group>\r\n          </Col> */}\r\n        </Form.Row>\r\n        <Form.Row>\r\n          <Col>\r\n            <Form.Group className=\"sm-3\">\r\n              <Form.Label>Assign this playlist to a client:</Form.Label>\r\n              <br />\r\n              <select\r\n                className=\"u-flex--1\"\r\n                onChange={inputChanged}\r\n                name=\"targetClientId\"\r\n                value={localState.targetClientId}\r\n              >\r\n                <option value=\"\">-- none --</option>\r\n                {_.map(getClients, (client) => (\r\n                  <option value={client.id}>{client.name}</option>\r\n                ))}\r\n              </select>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col>\r\n            <Form.Group className=\"sm-3\" controlId=\"colorPicker\">\r\n              <Form.Label>Background colour</Form.Label>\r\n              <ChromePicker\r\n                alpha={false}\r\n                color={localState.backgroundColor || \"#000000\"}\r\n                onChange={handleColorChange}\r\n              />\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n        <Form.Row>\r\n          <Col md={6} lg={3}>\r\n            <Form.Group className=\"sm-3\" controlId=\"save\">\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Save playlist\r\n              </Button>\r\n            </Form.Group>\r\n          </Col>\r\n          <Col md={6} lg={3}>\r\n            <Form.Group>\r\n              <Button\r\n                variant=\"warning\"\r\n                onClick={(e) => {\r\n                  e.preventDefault();\r\n                  setConfirmModalVisible(true);\r\n                }}\r\n              >\r\n                Delete playlist\r\n              </Button>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n\r\n        <ImageSorter\r\n          selectedImageIds={localState.images}\r\n          changeCallback={imageSelectionChanged}\r\n          backgroundColor={localState.backgroundColor || \"#000000\"}\r\n        />\r\n      </Form>\r\n      <ConfirmationModal\r\n        show={confirmModalVisible}\r\n        onAccept={(e) => {\r\n          setConfirmModalVisible(false);\r\n          deleteCurrentConfig();\r\n        }}\r\n        onDecline={() => setConfirmModalVisible(false)}\r\n        title={localState.name}\r\n      />{\" \"}\r\n    </div>\r\n  ) : (\r\n    <div>Choose a playlist from the list to configure it.</div>\r\n  );\r\n\r\n  return <div>{body}</div>;\r\n}\r\n","import { Button } from \"react-bootstrap\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport _ from \"underscore\";\r\nimport { formPlaylist, playlistId, playlistsList } from \"../recoil/playlists\";\r\n\r\nexport function PlaylistList(props) {\r\n  const playlists = useRecoilValue(playlistsList);\r\n  const playlistIdSetter = useSetRecoilState(playlistId);\r\n  const setCurrentFormData = useSetRecoilState(formPlaylist);\r\n\r\n  const selector = (e) => {\r\n    e.preventDefault();\r\n    // clear existing object\r\n    setCurrentFormData({});\r\n    playlistIdSetter((oldId) => parseInt(e.target.dataset.target));\r\n  };\r\n\r\n  const newPlaylist = (e) => {\r\n    const currentHighestId = _.max(_.pluck(playlists, \"id\"));\r\n    console.log(playlists);\r\n    // clear existing object\r\n    setCurrentFormData({});\r\n    playlistIdSetter((oldId) =>\r\n      currentHighestId > 0 ? currentHighestId + 1 : 1\r\n    );\r\n  };\r\n\r\n  const renderItem = (item) => {\r\n    return (\r\n      <div key={item.id} className=\"c-clients__single\">\r\n        <a href=\"clients-{item-id}\" data-target={item.id} onClick={selector}>\r\n          {item.name}\r\n        </a>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"c-clients\">\r\n      <h4>Playlists:</h4>\r\n      <div>{_.isEmpty(playlists) ? 'no playlists found' : playlists.map(renderItem)}</div>\r\n      <Button\r\n        className=\"u-margin--top-20\"\r\n        onClick={newPlaylist}\r\n        variant=\"light\"\r\n        type=\"submit\"\r\n      >\r\n        New Playlist\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","import { Component, Suspense } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport { PlaylistConfigForm } from \"./PlaylistConfigForm\";\r\nimport { PlaylistList } from \"./PlaylistList\";\r\n\r\nexport default class PlaylistConfig extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { userId: 0 };\r\n  }\r\n\r\n  onImagesetSelect(e) {\r\n    e.preventDefault();\r\n    this.setState({ userId: e.target.dataset.target });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"u-pad--20\">\r\n          <h4>Playlist manager</h4>\r\n        </div>\r\n        <Container fluid className=\"u-h--1\">\r\n          <Row className=\"u-h--1\">\r\n            <Col xs={12} md={2} lg={2} className=\"sidebar u-pad--20\">\r\n              <Suspense fallback={<div>Loading...</div>}>\r\n                <PlaylistList\r\n                  className=\"u-h--1\"\r\n                  onImagesetSelect={this.onImagesetSelect.bind(this)}\r\n                ></PlaylistList>\r\n              </Suspense>\r\n            </Col>\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Col xs={12} md={10} lg={10} className=\"u-pad--20\">\r\n                <PlaylistConfigForm ImagesetId={this.state.userId} />\r\n              </Col>\r\n            </Suspense>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { Button, Col, Form } from \"react-bootstrap\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { useRecoilState, useResetRecoilState } from \"recoil\";\r\nimport _ from \"underscore\";\r\nimport { imagesList, IMAGE_UPLOAD_URL } from \"../recoil/images\";\r\n\r\nexport default function ImageLoader() {\r\n  // the file handles\r\n  const [form, setForm] = useState({ uploadDir: \"\" });\r\n  // the img tags generated from them\r\n  const [uploadedImages, setuploadedImages] = useState([]);\r\n  const resetImages = useResetRecoilState(imagesList);\r\n  const [getImages, setImages] = useRecoilState(imagesList);\r\n\r\n  //the completed uploads\r\n\r\n  useEffect(() => {});\r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    dealWithUploads(acceptedFiles);\r\n  }, []);\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  const handleSubmit = function (e) {\r\n    e.preventDefault();\r\n    uploadSelectedFiles();\r\n  };\r\n  const inputChanged = function (e) {\r\n    let newValue =\r\n      e.target.type === \"checkbox\" ? e.target.checked : e.target.value;\r\n    newValue = e.target.type === \"number\" ? parseInt(newValue) : newValue;\r\n    const newLocalState = _.defaults(\r\n      { [e.target.name]: newValue },\r\n      { ...form }\r\n    );\r\n    setForm(newLocalState);\r\n  };\r\n\r\n  const dealWithUploads = async function (rawFileHandles) {\r\n    const promises = _.map(rawFileHandles, (upload) => {\r\n      return new Promise((resolve) => {\r\n        const reader = new FileReader();\r\n\r\n        reader.onabort = () => console.log(\"file reading was aborted\");\r\n        reader.onerror = () => console.log(\"file reading has failed\");\r\n        reader.onload = () =>\r\n          resolve({ uid: upload.path, file: upload, uri: reader.result });\r\n        reader.readAsDataURL(upload);\r\n      });\r\n    });\r\n    let result;\r\n    await Promise.all(promises).then((allDataURIs) => {\r\n      result = _.map(allDataURIs, (resultObj, fileIndex) => {\r\n        return {\r\n          uid: resultObj.uid,\r\n          element: (\r\n            <img alt={resultObj.uid} key={fileIndex} src={resultObj.uri} />\r\n          ),\r\n          file: resultObj.file,\r\n        };\r\n      });\r\n    });\r\n    console.log('dealWithUploads', { result });\r\n    setuploadedImages(result);\r\n  };\r\n  const uploadSelectedFiles = async () => {\r\n    const promises = _.map(uploadedImages, ({ file }) => {\r\n      const formData = new FormData();\r\n      formData.append(\"subdir\", form.uploadDir);\r\n      formData.append(\"file\", file);\r\n      console.log(`form.uploadDir: ${form.uploadDir}`);\r\n      const request = new Request(IMAGE_UPLOAD_URL, {\r\n        method: \"POST\",\r\n        body: formData,\r\n        headers: {},\r\n      });\r\n\r\n      return fetch(request).then((res) => res.json());\r\n    });\r\n    Promise.all(promises)\r\n      .then((results) => {\r\n        let newUploads = _.clone(uploadedImages);\r\n        _.each(results, (uploadResult) => {\r\n          if (uploadResult.stats)\r\n            setImages((images) => {\r\n              debugger;\r\n              const newImages = _.clone(images);\r\n              newImages.push(uploadResult.stats);\r\n              return newImages;\r\n            });\r\n          newUploads = _.filter(\r\n            newUploads,\r\n            (upload) => upload.uid !== uploadResult.uid\r\n          );\r\n        });\r\n        setuploadedImages(newUploads);\r\n      })\r\n  };\r\n  const emptyMessage = _.isEmpty(uploadedImages) ? (\r\n    <p>Drag files here, or click to select files</p>\r\n  ) : (\r\n    <p></p>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"u-pad--top-20\">\r\n        <h4>Image uploader</h4>\r\n      </div>\r\n      <p>\r\n        Upload your images by dropping them into the area below. When you have\r\n        selected them, hit upload.\r\n      </p>\r\n\r\n      <Form onSubmit={handleSubmit}>\r\n        <Form.Row>\r\n          <Col sm=\"4\">\r\n            <Form.Group controlId=\"uploadDir\">\r\n              <Form.Label>Upload subdirectory</Form.Label>\r\n              <Form.Control\r\n                name=\"uploadDir\"\r\n                onChange={inputChanged}\r\n                type=\"text\"\r\n                value={form.uploadDir}\r\n              />\r\n              <Form.Text className=\"text-muted\">\r\n                Optional subdir to upload files - can make filtering easier..\r\n              </Form.Text>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n\r\n        <Form.Row>\r\n          <Col>\r\n            <div className=\"c-filedropzone\" {...getRootProps()}>\r\n              <input {...getInputProps()} />\r\n              <div className=\"c-filedropzone-inner\">\r\n                {isDragActive ? <p>Drop the files here ...</p> : emptyMessage}\r\n                <div className=\"upload\">\r\n                  {_.pluck(uploadedImages, \"element\")}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </Col>\r\n        </Form.Row>\r\n        <Form.Row>\r\n          <Col>\r\n            <Form.Group className=\"sm-3 u-margin--top-20\" controlId=\"save\">\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Upload\r\n              </Button>\r\n            </Form.Group>\r\n          </Col>\r\n        </Form.Row>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n","import \"./css/App.scss\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nimport { Header } from \"./components/Header\";\nimport { Component, Suspense } from \"react\";\nimport LinkList from \"./components/LinkList\";\nimport { Welcome } from \"./components/Welcome\";\nimport ClientConfig from \"./components/ClientConfig\";\nimport { RecoilRoot } from \"recoil\";\nimport PlaylistConfig from \"./components/PlaylistConfig\";\nimport ImageLoader from \"./components/ImageLoader\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = { currentScreen: \"welcome\" };\n    this.linkClick = this.changeScreen.bind(this);\n  }\n  render() {\n    let mainContent;\n    console.log(`this.state.currentScreen: ${this.state.currentScreen}`);\n    switch (this.state.currentScreen) {\n      case \"imagesorter\":\n        mainContent = <PlaylistConfig />;\n        break;\n      case \"welcome\":\n        mainContent = <Welcome />;\n        break;\n      case \"clientconfig\":\n        mainContent = <ClientConfig />;\n        break;\n      case \"imageupload\":\n        mainContent = <ImageLoader />;\n        break;\n\n      default:\n        break;\n    }\n    return (\n      <RecoilRoot>\n        <div className=\"App full-height\">\n          <Container fluid className=\"c-header-background\">\n            <Container>\n              <Suspense fallback={<div>Loading...</div>}>\n                <Header title=\"Pixel grid admin\" homeclick={this.linkClick}>\n                  <LinkList\n                    onClick={this.linkClick}\n                    activeScreen={this.state.currentScreen}\n                  />\n                </Header>\n              </Suspense>\n            </Container>\n          </Container>\n          <Container className=\"u-h--1\">\n            <Row className=\"u-h--1\">\n              <Col className=\"u-pad--20\">{mainContent}</Col>\n            </Row>\n          </Container>\n        </div>\n      </RecoilRoot>\n    );\n  }\n\n  changeScreen(e) {\n    console.log(e);\n    e.preventDefault();\n    this.setState({ currentScreen: e.currentTarget.dataset.target });\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}